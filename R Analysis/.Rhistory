states <- subset(states, select = c("State", "Measure.Name", "Measure", "Type", "Score"))
states <- dcast(states, State + Measure ~ Type)
# Join the measures so we get measure names with data
states <- left_join(states, measures)
# Remove rows which have NA
states <- states[-which(is.na(states$Score)),]
# Preview Data
head(states[,1:5])
states <- read.csv("http://data.medicare.gov/api/views/k2ze-bqvw/rows.csv?accessType=DOWNLOAD")
startDate <- unique(states$Measure.Start.Date)
endDate <- unique(states$Measure.End.Date)
# Split the Measure.ID column
states <- states %>% mutate("Measure" = substring(text = Measure.ID, first = 1, last = 5),
"Type" = substring(text = Measure.ID, first = 7,
last = length(Measure.ID)))
# List of different measures
measures <- unique(filter(states, Type == "SIR")[,c("Measure", "Measure.Name")])
# Then only select needed columns
states <- subset(states, select = c("State", "Measure.Name", "Measure", "Type", "Score"))
states <- dcast(states, State + Measure ~ Type)
which(is.na(states$SIR))
# Join the measures so we get measure names with data
states <- left_join(states, measures)
# Remove rows which have NA
states <- states[-which(is.na(states$SIR)),]
# Preview Data
head(states[,1:5])
states %>% group_by(Measure) %>% summarise(mean(SIR))
measures["HAI_2",]
measures[,]
filter(measures, Measure == "HAI_2")
?lm
states
head(states, 1)
?melt
count(which(states$CI_LOWER < 1 & states$CI_UPPER > 1))
filter(states, CI_LOWER < 1, CI_UPPER > 1)
nrow(filter(states, CI_LOWER < 1, CI_UPPER > 1))
?melt
dcast(states, State ~ Measure)
head(dcast(states, State ~ Measure),1)
head(dcast(states, State ~ SIR),1)
head(dcast(states, State ~ Measure),1)
head(states,1)
?dcast
head(dcast(states, State ~ Measure, var.value = SIR),1)
head(states, 1)
head(dcast(states, State ~ SIR, var.value = SIR),1)
head(dcast(states, State ~ SIR),1)
head(states, 1)
head(dcast(states, Measure ~ SIR),1)
head(dcast(states, State + SIR ~ Measure),1)
head(dcast(states, State + Measure ~ SIR),1)
head(dcast(states, State + SIR ~ Measure),1)
head(states)
head(states, 1)
head(dcast(states, State ~ SIR + Measure),1)
head(dcast(states, State ~ Measure + SIR),1)
head(dcast(states, State + SIR ~ Measure),1)
filter(states, State == "AK")
states <- states[,1:5]
filter(states, State == "AK")
head(dcast(states, State + SIR ~ Measure),1)
ak <- filter(states, State == "AK")
ak
dcast(ak, State ~ SIR)
dcast(ak, State ~ SIR + Measure)
dcast(ak, State ~ Measure)
head(dcast(state, State ~ Measure), 1)
head(dcast(states, State ~ Measure), 1)
head(dcast(states, State ~ Measure, var.value = "SIR"), 1)
head(dcast(states, State ~ Measure, var.value = "SIR"))
states <- read.csv("http://data.medicare.gov/api/views/k2ze-bqvw/rows.csv?accessType=DOWNLOAD")
# Date Range
startDate <- unique(states$Measure.Start.Date)
endDate <- unique(states$Measure.End.Date)
# Split the Measure.ID column
states <- states %>% mutate("Measure" = substring(text = Measure.ID, first = 1, last = 5),
"Type" = substring(text = Measure.ID, first = 7,
last = length(Measure.ID)))
# List of different measures
measures <- unique(filter(states, Type == "SIR")[,c("Measure", "Measure.Name")])
# Then only select needed columns
states <- subset(states, select = c("State", "Measure.Name", "Measure", "Type", "Score"))
states <- dcast(states, State + Measure ~ Type)
# Join the measures so we get measure names with data
states <- left_join(states, measures)
# Remove rows which have NA
states <- states[-which(is.na(states$SIR)),]
head(dcast(states, State ~ Measure, var.value = "SIR"))
head(dcast(states, State ~ Measure, var.value = SIR))
head(dcast(states, State ~ Measure, value.var = SIR))
head(dcast(states, State ~ Measure, value.var = "SIR"))
sirs <- head(dcast(states, State ~ Measure, value.var = "SIR"))
# Preview Data
head(sirs)
cor(sirs)
head(sirs)
head(sirs[,2:7])
cor(sirs[,2:7])
qplot(State)
qplot(State, data = sirs)
qplot(State, y=sirs[,2:7], data = sirs)
states %>% group_by(Measure) %>% summarise(mean(SIR))
states %>% group_by(Measure) %>% summarise(mean(SIR), stdev(SIR))
states %>% group_by(Measure) %>% summarise(mean(SIR), sd(SIR))
plot(states %>% group_by(Measure) %>% summarise(mean(SIR), sd(SIR)))
summary <- states %>% group_by(Measure) %>% summarise(mean(SIR), sd(SIR))
summary
qplot(summary)
?boxplot
boxplot(mean(SIR), data = summary)
boxplot("mean(SIR)", data = summary)
boxplot(states$SIR ~ Measure)
boxplot(states$SIR ~ Measure, data = states)
boxplot(states$SIR ~ Measure, data = states, main = "Boxplot of SIR Scores by Measure")
boxplot(states$SIR ~ Measure, data = states, main = "Boxplot of SIR Scores by Measure", col = "#90C74C")
cor(sirs[,2:7])
max(cor(sirs[,2:7]))
min(cor(sirs[,2:7]))
?cor
cov(sirs[,2:7])
min(cor(sirs[,2:7]))
min(cor(sirs[,2:7]))
?lm
lm(HAI_1 ~ ., data = sirs)
sirs
lm(HAI_1 ~ ., data = sirs[,2:7])
library(googleVis)
?gvisGeoChart
gvisGeoChart(data = sirs)
plot(gvisGeoChart(data = sirs))
plot(gvisGeoChart(data = sirs,
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400)))
sirs
central <- c("IL", "IN", "IA", "KY", "MI", "MN", "MO", "OH", "WI")
northern <- c("CT", "DE", "ME", "MD", "MA", "NH", "NJ", "NY", "PA", "RI", "VT")
pacific <- c("AK", "AZ", "CA", "HI", "NV", "OR", "UT", "WA")
southern <- c("AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "VA", "WV")
western <- c("CO", "ID", "KS", "MT", "NE", "NM", "ND", "OK", "SD", "TX", "WY")
cbind(c("IL", "IN", "IA", "KY", "MI", "MN", "MO", "OH", "WI", #central
"CT", "DE", "ME", "MD", "MA", "NH", "NJ", "NY", "PA", "RI", "VT", #northern
"AK", "AZ", "CA", "HI", "NV", "OR", "UT", "WA", #pacific
"AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "VA", "WV", #southern
"CO", "ID", "KS", "MT", "NE", "NM", "ND", "OK", "SD", "TX", "WY") #western,
c("central", "central", "central", "central", "central", "central", "central", "central", "central", #central
"northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", #northern
"pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific", #pacific
"southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", #southern
"western", "western", "western", "western", "western", "western", "western", "western", "western", "western", "western") #western)
regions <- cbind(c("IL", "IN", "IA", "KY", "MI", "MN", "MO", "OH", "WI",
"CT", "DE", "ME", "MD", "MA", "NH", "NJ", "NY", "PA", "RI", "VT",
"AK", "AZ", "CA", "HI", "NV", "OR", "UT", "WA",
"AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "VA", "WV",
"CO", "ID", "KS", "MT", "NE", "NM", "ND", "OK", "SD", "TX", "WY"),
c("central", "central", "central", "central", "central", "central", "central", "central", "central",
"northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern",
"pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific",
"southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern",
"western", "western", "western", "western", "western", "western", "western", "western", "western", "western", "western"))
regions
states
sirs
nrow(sirs)
clear
sirs
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
library(googleVis)
# Abreviations for the 50 states
stateAbrevs <- c("IL", "IN", "IA", "KY", "MI", "MN", "MO", "OH", "WI",
"CT", "DE", "ME", "MD", "MA", "NH", "NJ", "NY", "PA", "RI", "VT",
"AK", "AZ", "CA", "HI", "NV", "OR", "UT", "WA",
"AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "VA", "WV",
"CO", "ID", "KS", "MT", "NE", "NM", "ND", "OK", "SD", "TX", "WY")
# Load data from healthdata.gov
states <- read.csv("http://data.medicare.gov/api/views/k2ze-bqvw/rows.csv?accessType=DOWNLOAD")
startDate <- unique(states$Measure.Start.Date)
endDate <- unique(states$Measure.End.Date)
# Split the Measure.ID column
states <- states %>% mutate("Measure" = substring(text = Measure.ID, first = 1, last = 5),
"Type" = substring(text = Measure.ID, first = 7,
last = length(Measure.ID)))
# List of different measures
measures <- unique(filter(states, Type == "SIR")[,c("Measure", "Measure.Name")])
# Then only select needed columns
states <- subset(states, select = c("State", "Measure.Name", "Measure", "Type", "Score"))
states <- dcast(states, State + Measure ~ Type)
# Join the measures so we get measure names with data
states <- left_join(states, measures)
# Remove rows which have NA
states <- states[-which(is.na(states$SIR)),]
# Create data.frame with just SIRs by state
sirs <- head(dcast(states, State ~ Measure, value.var = "SIR"))
# Preview Data
head(sirs)
states <- read.csv("http://data.medicare.gov/api/views/k2ze-bqvw/rows.csv?accessType=DOWNLOAD")
states <- states %>% mutate("Measure" = substring(text = Measure.ID, first = 1, last = 5),
"Type" = substring(text = Measure.ID, first = 7,
last = length(Measure.ID)))
head(stats)
head(states)
measures <- unique(filter(states, Type == "SIR")[,c("Measure", "Measure.Name")])
rm(sirs)
states <- subset(states, select = c("State", "Measure.Name", "Measure", "Type", "Score"))
states <- dcast(states, State + Measure ~ Type)
head(states)
?left_join
left_join(states, measures)
states <- left_join(states, measures)
states[-which(is.na(states$SIR)),]
states <- states[-which(is.na(states$SIR)),]
sirs <- dcast(states, State ~ Measure, value.var = "SIR")
sirs
left_join(sirs, stateAbrevs)
head(stateAbrevs)
stateAbrevs <- data.frame("IL", "IN", "IA", "KY", "MI", "MN", "MO", "OH", "WI",
"CT", "DE", "ME", "MD", "MA", "NH", "NJ", "NY", "PA", "RI", "VT",
"AK", "AZ", "CA", "HI", "NV", "OR", "UT", "WA",
"AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "VA", "WV",
"CO", "ID", "KS", "MT", "NE", "NM", "ND", "OK", "SD", "TX", "WY", row.names = c("State"))
left_join(sirs, stateAbrevs)
head(stateAbrevs)
data.frame
?data.frame
stateAbrevs <- data.frame("IL", "IN", "IA", "KY", "MI", "MN", "MO", "OH", "WI",
"CT", "DE", "ME", "MD", "MA", "NH", "NJ", "NY", "PA", "RI", "VT",
"AK", "AZ", "CA", "HI", "NV", "OR", "UT", "WA",
"AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "VA", "WV",
"CO", "ID", "KS", "MT", "NE", "NM", "ND", "OK", "SD", "TX", "WY")
colnames(stateAbrevs) <- c("State")
left_join(sirs, stateAbrevs)
head(stateAbrevs)
stateAbrevs <- data.frame(c("IL", "IN", "IA", "KY", "MI", "MN", "MO", "OH", "WI",
"CT", "DE", "ME", "MD", "MA", "NH", "NJ", "NY", "PA", "RI", "VT",
"AK", "AZ", "CA", "HI", "NV", "OR", "UT", "WA",
"AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "VA", "WV",
"CO", "ID", "KS", "MT", "NE", "NM", "ND", "OK", "SD", "TX", "WY"))
colnames(stateAbrevs) <- c("State")
head(stateAbrevs)
left_join(sirs, stateAbrevs)
stateAbrevs <- c("IL", "IN", "IA", "KY", "MI", "MN", "MO", "OH", "WI",
"CT", "DE", "ME", "MD", "MA", "NH", "NJ", "NY", "PA", "RI", "VT",
"AK", "AZ", "CA", "HI", "NV", "OR", "UT", "WA",
"AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "VA", "WV",
"CO", "ID", "KS", "MT", "NE", "NM", "ND", "OK", "SD", "TX", "WY")
regions <- cbind(stateAbrevs,
c("central", "central", "central", "central", "central", "central", "central", "central", "central",
"northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern",
"pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific",
"southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern",
"western", "western", "western", "western", "western", "western", "western", "western", "western", "western", "western"))
colnames(regions) <- c("State", "Region")
head(regions)
left_join(sirs, stateAbrevs)
?cbind
stateAbrevs <- data.frame(c("IL", "IN", "IA", "KY", "MI", "MN", "MO", "OH", "WI",
"CT", "DE", "ME", "MD", "MA", "NH", "NJ", "NY", "PA", "RI", "VT",
"AK", "AZ", "CA", "HI", "NV", "OR", "UT", "WA",
"AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "VA", "WV",
"CO", "ID", "KS", "MT", "NE", "NM", "ND", "OK", "SD", "TX", "WY"))
regions <- cbind(stateAbrevs,
c("central", "central", "central", "central", "central", "central", "central", "central", "central",
"northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern",
"pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific",
"southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern",
"western", "western", "western", "western", "western", "western", "western", "western", "western", "western", "western"))
colnames(regions) <- c("State", "Region")
head(regions)
left_join(sirs, stateAbrevs)
head(sirs)
left_join(sirs, stateAbrevs, by = c("State"))
?left_join
inner_join(sirs, stateAbrevs, by = c("State"))
inner_join(sirs, stateAbrevs, by = c("State" = "State"))
semi_join(sirs, stateAbrevs, by = c("State" = "State"))
nrow(regions)
inner_join(sirs, regions, by = c("State" = "State"))
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
library(googleVis)
# Abreviations for the 50 states
stateAbrevs <- data.frame(c("IL", "IN", "IA", "KY", "MI", "MN", "MO", "OH", "WI",
"CT", "DE", "ME", "MD", "MA", "NH", "NJ", "NY", "PA", "RI", "VT",
"AK", "AZ", "CA", "HI", "NV", "OR", "UT", "WA",
"AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "VA", "WV",
"CO", "ID", "KS", "MT", "NE", "NM", "ND", "OK", "SD", "TX", "WY"))
regions <- cbind(stateAbrevs,
c("central", "central", "central", "central", "central", "central", "central", "central", "central",
"northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern",
"pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific",
"southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern",
"western", "western", "western", "western", "western", "western", "western", "western", "western", "western", "western"))
colnames(regions) <- c("State", "Region")
# Load data from healthdata.gov
states <- read.csv("http://data.medicare.gov/api/views/k2ze-bqvw/rows.csv?accessType=DOWNLOAD")
# Date Range
startDate <- unique(states$Measure.Start.Date)
endDate <- unique(states$Measure.End.Date)
# Split the Measure.ID column
states <- states %>% mutate("Measure" = substring(text = Measure.ID, first = 1, last = 5),
"Type" = substring(text = Measure.ID, first = 7,
last = length(Measure.ID)))
# List of different measures
measures <- unique(filter(states, Type == "SIR")[,c("Measure", "Measure.Name")])
# Then only select needed columns
states <- subset(states, select = c("State", "Measure.Name", "Measure", "Type", "Score"))
states <- dcast(states, State + Measure ~ Type)
# Join the measures so we get measure names with data
states <- left_join(states, measures)
# Remove rows which have NA
states <- states[-which(is.na(states$SIR)),]
# Create data.frame with just SIRs by state
sirs <- dcast(states, State ~ Measure, value.var = "SIR")
# Reduce the list to only contain the 50 states
sirs <- inner_join(sirs, regions, by = c("State" = "State"))
# Preview Data
head(sirs)
qplot(State, SIR, data = states, col = Measure, main = "Plot of SIR scores by State and Measure") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position="bottom")
states %>% group_by(Measure) %>% summarise(mean(SIR), sd(SIR))
boxplot(states$SIR ~ Measure, data = states, main = "Boxplot of SIR Scores by Measure", col = "#90C74C")
cor(sirs[,2:7])
library(caret)
plot(gvisGeoChart(data = sirs,
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400)))
sirs
plot(gvisGeoChart(data = sirs,
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400)))
?gvisGeoChart
plot(gvisGeoChart(data = sirs, colorvar = "HAI_1"
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400)))
plot(gvisGeoChart(data = sirs, colorvar = "HAI_1",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400)))
plot(gvisGeoChart(data = sirs, colorvar = "HAI_2",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400)))
par(nfrow(c(2, 3)))
plot(gvisGeoChart(data = sirs, colorvar = "HAI_1",
options=list(region="US", displayMode="regions",
resolution="provinces", width=600, height=400)))
plot(gvisGeoChart(data = sirs, colorvar = "HAI_2",
options=list(region="US", displayMode="regions",
resolution="provinces", width=600, height=400)))
plot(gvisGeoChart(data = sirs, colorvar = "HAI_3",
options=list(region="US", displayMode="regions",
resolution="provinces", width=600, height=400)))
par(mfrow = c(2,2))
gvisGeoChart(data = sirs, colorvar = "HAI_1",
options=list(region="US", displayMode="regions",
resolution="provinces", width=600, height=400))
plot(gvisGeoChart(data = sirs, colorvar = "HAI_1",
options=list(region="US", displayMode="regions",
resolution="provinces", width=600, height=400)))
?googleVis
?packages
?package
?library
sessionInfo()
?gvisMerge
?gvisGeoChart
head(sirs)
lm(Region ~ HAI_1 + HAI_2 + HAI_3 + HAI_4 + HAI_5 + HAI_6)
lm(Region ~ HAI_1 + HAI_2 + HAI_3 + HAI_4 + HAI_5 + HAI_6, data = sirs)
library(caret)
inTrain <- createDataPartition(sirs$Region, p = 0.75, list = FALSE)
train <- sirs[inTrain,]
test <- sirs[-inTrain,]
lm(Region ~ HAI_1 + HAI_2 + HAI_3 + HAI_4 + HAI_5 + HAI_6, data = train)
fit <- lm(Region ~ HAI_1 + HAI_2 + HAI_3 + HAI_4 + HAI_5 + HAI_6, data = train)
predict(fit, test, type = "class")
?predict
predict(fit, test)
rfPredict <- predict(rfModel$finalModel, test, type = "class")
rfMatrix <- confusionMatrix(rfPredict, test$class)
pre <- predict(fit, test, type = "class")
pre <- predict(fit, test)
confusionMatrix(pre, test$region)
pre
fit$model
pre <- predict(fit$model, test)
pre
fit
rpartModel <- train(classe ~ ., train, method = "rpart", trControl=trainControl(method = "cv", number = 4))
## Plot the decision tree
fancyRpartPlot(rpartModel$finalModel)
rpartModel <- train(Region ~ HAI_1 + HAI_2 + HAI_3 + HAI_4 + HAI_5 + HAI_6, train, method = "rpart", trControl=trainControl(method = "cv", number = 4))
fancyRpartPlot(rpartModel$finalModel)
library(randomForest)
library(rpart)
library(rpart.plot)
library(rattle)
fancyRpartPlot(rpartModel$finalModel)
train
rpartTrainPredict <- predict(rpartModel$finalModel, train, type = "class")
rpartTrainMatrix <- confusionMatrix(rpartTrainPredict, train$classe)
rpartTrainPredict <- predict(rpartModel$finalModel, train, type = "class")
rpartTrainMatrix <- confusionMatrix(rpartTrainPredict, train$Region)
rpartTrainMatrix
rpartTrainMatrix$overall[[1]]
1 -rpartTrainMatrix$overall[[1]]
rpartPredict <- predict(rpartModel$finalModel, test, type = "class")
rpartMatrix <- confusionMatrix(rpartPredict, test$Region)
rpartMatrix
1 - rpartMatrix$overall[[1]]
rfModel <- train(Region ~ HAI_1 + HAI_2 + HAI_3 + HAI_4 + HAI_5 + HAI_6, train, method = "rf", trControl=trainControl(method = "cv", number = 4))
rfTrainPredict <- predict(rfModel$finalModel, train, type = "class")
rfTrainMatrix <- confusionMatrix(rfTrainPredict, train$classe)
rfTrainPredict <- predict(rfModel$finalModel, train, type = "class")
rfTrainMatrix <- confusionMatrix(rfTrainPredict, train$Region)
1 - rfTrainMatrix$overall[[1]]
rfPredict <- predict(rfModel$finalModel, test, type = "class")
rfMatrix <- confusionMatrix(rfPredict, test$Region)
rfMatrix
1 - rfMatrix$overall[[1]]
rfMatrix
?trainControl
rfModel <- train(Region ~ HAI_1 + HAI_2 + HAI_3 + HAI_4 + HAI_5 + HAI_6, train, method = "rf")
rfPredict <- predict(rfModel$finalModel, test, type = "class")
rfMatrix <- confusionMatrix(rfPredict, test$Region)
rfMatrix
1 - rfMatrix$overall[[1]]
?train
train
(head(train))
rfModel <- train(Region ~ HAI_1 + HAI_2 + HAI_3 + HAI_4 + HAI_5 + HAI_6, train, method = "rf")
sirs$Region
train$Region
unique(train$Region)
length(unique(train$Region))
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
library(googleVis)
op <- options(gvis.plot.tag = "chart")
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(rattle)
# Abreviations for the 50 states
stateAbrevs <- data.frame(c("IL", "IN", "IA", "KY", "MI", "MN", "MO", "OH", "WI",
"CT", "DE", "ME", "MD", "MA", "NH", "NJ", "NY", "PA", "RI", "VT",
"AK", "AZ", "CA", "HI", "NV", "OR", "UT", "WA",
"AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "VA", "WV",
"CO", "ID", "KS", "MT", "NE", "NM", "ND", "OK", "SD", "TX", "WY"))
regions <- cbind(stateAbrevs,
c("central", "central", "central", "central", "central", "central", "central", "central", "central",
"northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern", "northern",
"pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific", "pacific",
"southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern", "southern",
"western", "western", "western", "western", "western", "western", "western", "western", "western", "western", "western"))
colnames(regions) <- c("State", "Region")
# Load data from healthdata.gov
states <- read.csv("http://data.medicare.gov/api/views/k2ze-bqvw/rows.csv?accessType=DOWNLOAD")
startDate <- unique(states$Measure.Start.Date)
endDate <- unique(states$Measure.End.Date)
# Split the Measure.ID column
states <- states %>% mutate("Measure" = substring(text = Measure.ID, first = 1, last = 5),
"Type" = substring(text = Measure.ID, first = 7,
last = length(Measure.ID)))
# List of different measures
measures <- unique(filter(states, Type == "SIR")[,c("Measure", "Measure.Name")])
# Then only select needed columns
states <- subset(states, select = c("State", "Measure.Name", "Measure", "Type", "Score"))
states <- dcast(states, State + Measure ~ Type)
# Join the measures so we get measure names with data
states <- left_join(states, measures)
# Remove rows which have NA
states <- states[-which(is.na(states$SIR)),]
# Create data.frame with just SIRs by state
sirs <- dcast(states, State ~ Measure, value.var = "SIR")
# Reduce the list to only contain the 50 states
sirs <- inner_join(sirs, regions, by = c("State" = "State"))
# Preview Data
head(sirs)
sirs$Region
qplot(State, SIR, data = states, col = Measure, main = "Plot of SIR scores by State and Measure") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position="bottom")
states %>% group_by(Measure) %>% summarise(mean(SIR), sd(SIR))
boxplot(states$SIR ~ Measure, data = states, main = "Boxplot of SIR Scores by Measure", col = "#90C74C")
cor(sirs[,2:7])
inTrain <- createDataPartition(sirs$Region, p = 0.75, list = FALSE)
train <- sirs[inTrain,]
test <- sirs[-inTrain,]
rfModel <- train(Region ~ HAI_1 + HAI_2 + HAI_3 + HAI_4 + HAI_5 + HAI_6, train, method = "rf")
rfModelControl <- train(Region ~ HAI_1 + HAI_2 + HAI_3 + HAI_4 + HAI_5 + HAI_6, train, method = "rf", trControl=trainControl(method = "cv", number = 4))
rfControl <- predict(rfModel$finalModel, test, type = "class")
controlMatrix <- confusionMatrix(rfControl, test$Region)
controlMatrix
?confusionMatrix
rfPredict
rfPredict <- predict(rfModel$finalModel, test, type = "class")
rfPredict
nrow(filter(states, CI_LOWER < 1, CI_UPPER > 1))
head(sirs)
